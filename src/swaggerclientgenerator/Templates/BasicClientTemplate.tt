<#@ template language="C#" #>

<#@ include file="GenerateClass.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

<#
	var className=model.ClassName;
	var configFileName= className + "Config";
	var @namespace = model.Namespace;

#>

namespace <#=@namespace#>
{
    public class <#=className#>
    {
        private readonly <#=configFileName#> config;
        private readonly HttpClient client;

        public <#=className#>(<#=configFileName#> config)
        {
            this.config = config;
            this.client = config.CreateClient();
        }

        public async Task<object> GetObject(object parameter)
        {
            var response = await client.GetAsync(string.Empty);

            if (response.StatusCode == HttpStatusCode.NotFound)
                return null;

            response.EnsureSuccessStatusCode();

            var result = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
            return result;
        }
    }

    public class <#=configFileName#>
    {
        public <#=configFileName#>(string endpoint,
            Dictionary<string, string> defaultHeaders = null)
        {
            Endpoint = endpoint;
            DefaultHeaders = defaultHeaders;
        }

        public string Endpoint { get; }
        public Dictionary<string, string> DefaultHeaders { get; }

        public HttpClient CreateClient()
        {
            var client = new HttpClient { BaseAddress = new Uri(Endpoint) };

            foreach (var header in DefaultHeaders ?? new Dictionary<string, string>())
                client.DefaultRequestHeaders.Add(header.Key, header.Value);

			
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            return client;
        }
    }
<# foreach(var definition in model.Definitions.Where(x=>x.ShouldGenerate)) { 	#>

<#=new GenerateClass(definition).TransformText()#>

<# } #>

}